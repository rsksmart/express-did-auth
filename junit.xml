<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="59" failures="0" time="30.422">
  <testsuite name="RefreshTokenFactory" errors="0" failures="0" skipped="0" timestamp="2021-03-10T19:47:05" time="10.596" tests="3">
    <testcase classname="RefreshTokenFactory should respond with 401 if no refresh token" name="RefreshTokenFactory should respond with 401 if no refresh token" time="0.006">
    </testcase>
    <testcase classname="RefreshTokenFactory should respond with 401 if invalid refresh token" name="RefreshTokenFactory should respond with 401 if invalid refresh token" time="0.001">
    </testcase>
    <testcase classname="RefreshTokenFactory no cookies should refresh if valid existing session" name="RefreshTokenFactory no cookies should refresh if valid existing session" time="0.127">
    </testcase>
  </testsuite>
  <testsuite name="Express app tests - no cookies" errors="0" failures="0" skipped="0" timestamp="2021-03-10T19:47:05" time="13.46" tests="1">
    <testcase classname="Express app tests - no cookies integration" name="Express app tests - no cookies integration" time="3.253">
    </testcase>
  </testsuite>
  <testsuite name="requestSignupFactory" errors="0" failures="0" skipped="0" timestamp="2021-03-10T19:47:19" time="0.934" tests="3">
    <testcase classname="requestSignupFactory should respond with a 200 with the created challenge if no sdr" name="requestSignupFactory should respond with a 200 with the created challenge if no sdr" time="0.011">
    </testcase>
    <testcase classname="requestSignupFactory should respond with a 200 with a the created challenge and sdr when sdr present in the config" name="requestSignupFactory should respond with a 200 with a the created challenge and sdr when sdr present in the config" time="0.175">
    </testcase>
    <testcase classname="requestSignupFactory should respond with a 401 if no did" name="requestSignupFactory should respond with a 401 if no did" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Express app tests" errors="0" failures="0" skipped="0" timestamp="2021-03-10T19:47:16" time="5.074" tests="2">
    <testcase classname="Express app tests should be able to create a non protected endpoint after setup" name="Express app tests should be able to create a non protected endpoint after setup" time="0.004">
    </testcase>
    <testcase classname="Express app tests should be able to create a protected endpoint after setup" name="Express app tests should be able to create a protected endpoint after setup" time="3.67">
    </testcase>
  </testsuite>
  <testsuite name="authenticationFactory" errors="0" failures="0" skipped="0" timestamp="2021-03-10T19:47:21" time="1.296" tests="11">
    <testcase classname="authenticationFactory should respond with 401 if no response" name="authenticationFactory should respond with 401 if no response" time="0.003">
    </testcase>
    <testcase classname="authenticationFactory should respond with 401 if the signed message contains another service url" name="authenticationFactory should respond with 401 if the signed message contains another service url" time="0.003">
    </testcase>
    <testcase classname="authenticationFactory should respond with 401 if the message is signed with another did" name="authenticationFactory should respond with 401 if the message is signed with another did" time="0.083">
    </testcase>
    <testcase classname="authenticationFactory should respond with 401 if the challenge is signed with another header" name="authenticationFactory should respond with 401 if the challenge is signed with another header" time="0.1">
    </testcase>
    <testcase classname="authenticationFactory should respond with 401 if the signer of the message is not the specified did" name="authenticationFactory should respond with 401 if the signer of the message is not the specified did" time="0.084">
    </testcase>
    <testcase classname="authenticationFactory should respond with 401 if invalid challenge" name="authenticationFactory should respond with 401 if invalid challenge" time="0.038">
    </testcase>
    <testcase classname="authenticationFactory should respond with 401 if extra business logic that returns false" name="authenticationFactory should respond with 401 if extra business logic that returns false" time="0.003">
    </testcase>
    <testcase classname="authenticationFactory should respond with 401 if extra business logic that throws an error" name="authenticationFactory should respond with 401 if extra business logic that throws an error" time="0.002">
    </testcase>
    <testcase classname="authenticationFactory should execute business logic with selective disclosure" name="authenticationFactory should execute business logic with selective disclosure" time="0.086">
    </testcase>
    <testcase classname="authenticationFactory no cookies no extra business logic" name="authenticationFactory no cookies no extra business logic" time="0.081">
    </testcase>
    <testcase classname="authenticationFactory no cookies extra business logic that returns true" name="authenticationFactory no cookies extra business logic that returns true" time="0.071">
    </testcase>
  </testsuite>
  <testsuite name="requestAuthFactory" errors="0" failures="0" skipped="0" timestamp="2021-03-10T19:47:22" time="0.623" tests="2">
    <testcase classname="requestAuthFactory should respond with a 200 with the created challenge" name="requestAuthFactory should respond with a 200 with the created challenge" time="0.003">
    </testcase>
    <testcase classname="requestAuthFactory should respond with a 401 if no did" name="requestAuthFactory should respond with a 401 if no did" time="0">
    </testcase>
  </testsuite>
  <testsuite name="SessionManager" errors="0" failures="0" skipped="0" timestamp="2021-03-10T19:47:23" time="0.327" tests="8">
    <testcase classname="SessionManager createRefreshToken should create a refresh token" name="SessionManager createRefreshToken should create a refresh token" time="0.001">
    </testcase>
    <testcase classname="SessionManager renewRefreshToken should throw an error if no refresh token" name="SessionManager renewRefreshToken should throw an error if no refresh token" time="0.002">
    </testcase>
    <testcase classname="SessionManager renewRefreshToken should respond with undefined if refresh token not exists" name="SessionManager renewRefreshToken should respond with undefined if refresh token not exists" time="0">
    </testcase>
    <testcase classname="SessionManager renewRefreshToken should allow to refresh a just created token" name="SessionManager renewRefreshToken should allow to refresh a just created token" time="0.001">
    </testcase>
    <testcase classname="SessionManager renewRefreshToken should do not allow to refresh an expired refresh token" name="SessionManager renewRefreshToken should do not allow to refresh an expired refresh token" time="0.001">
    </testcase>
    <testcase classname="SessionManager renewRefreshToken should allow to create a new refresh token even if the old one has expired" name="SessionManager renewRefreshToken should allow to create a new refresh token even if the old one has expired" time="0.001">
    </testcase>
    <testcase classname="SessionManager getCurrentRefreshToken should return undefined if no refresh token" name="SessionManager getCurrentRefreshToken should return undefined if no refresh token" time="0">
    </testcase>
    <testcase classname="SessionManager getCurrentRefreshToken should return current refresh token" name="SessionManager getCurrentRefreshToken should return current refresh token" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Express app tests - cookies" errors="0" failures="0" skipped="0" timestamp="2021-03-10T19:47:19" time="3.673" tests="1">
    <testcase classname="Express app tests - cookies integration" name="Express app tests - cookies integration" time="3.041">
    </testcase>
  </testsuite>
  <testsuite name="logoutFactory" errors="0" failures="0" skipped="0" timestamp="2021-03-10T19:47:23" time="0.65" tests="4">
    <testcase classname="logoutFactory should respond with a 200 and delete logged out did and refreshToken from state" name="logoutFactory should respond with a 200 and delete logged out did and refreshToken from state" time="0.007">
    </testcase>
    <testcase classname="logoutFactory should respond with a 200 even if the state is empty" name="logoutFactory should respond with a 200 even if the state is empty" time="0">
    </testcase>
    <testcase classname="logoutFactory should respond with a 200 even if the did present in req is not present in the state" name="logoutFactory should respond with a 200 even if the did present in req is not present in the state" time="0.001">
    </testcase>
    <testcase classname="logoutFactory should set an empty cookie with expiration time" name="logoutFactory should set an empty cookie with expiration time" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="ChallengeVerifier" errors="0" failures="0" skipped="0" timestamp="2021-03-10T19:47:23" time="0.687" tests="9">
    <testcase classname="ChallengeVerifier get should throw an error if no did" name="ChallengeVerifier get should throw an error if no did" time="0.007">
    </testcase>
    <testcase classname="ChallengeVerifier get should get a challenge" name="ChallengeVerifier get should get a challenge" time="0.002">
    </testcase>
    <testcase classname="ChallengeVerifier get should get the same challenge when invoking it within the same timeslot" name="ChallengeVerifier get should get the same challenge when invoking it within the same timeslot" time="0.002">
    </testcase>
    <testcase classname="ChallengeVerifier get should get different challenge when invoking it twice in differents timeslots" name="ChallengeVerifier get should get different challenge when invoking it twice in differents timeslots" time="0.011">
    </testcase>
    <testcase classname="ChallengeVerifier verify should throw an error if no did" name="ChallengeVerifier verify should throw an error if no did" time="0.001">
    </testcase>
    <testcase classname="ChallengeVerifier verify should respond with false if no challenge" name="ChallengeVerifier verify should respond with false if no challenge" time="0.001">
    </testcase>
    <testcase classname="ChallengeVerifier verify should respond with true if valid challenge in the same time slot" name="ChallengeVerifier verify should respond with true if valid challenge in the same time slot" time="0">
    </testcase>
    <testcase classname="ChallengeVerifier verify should respond with true twice if verifying twice in the same time slot" name="ChallengeVerifier verify should respond with true twice if verifying twice in the same time slot" time="0.001">
    </testcase>
    <testcase classname="ChallengeVerifier verify should respond with false if verifying the received challenge in other timeslot" name="ChallengeVerifier verify should respond with false if verifying the received challenge in other timeslot" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="RequestCounter" errors="0" failures="0" skipped="0" timestamp="2021-03-10T19:47:24" time="0.413" tests="3">
    <testcase classname="RequestCounter count should not allow to count more than the limit" name="RequestCounter count should not allow to count more than the limit" time="0.004">
    </testcase>
    <testcase classname="RequestCounter count should allow to count more than the limit if the requests are divided in different timeslots" name="RequestCounter count should allow to count more than the limit if the requests are divided in different timeslots" time="0.001">
    </testcase>
    <testcase classname="RequestCounter count should not allow to count more than the limit when reaching the second timeslot" name="RequestCounter count should not allow to count more than the limit when reaching the second timeslot" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Express app tests - cookies with multiple sessions" errors="0" failures="0" skipped="0" timestamp="2021-03-10T19:47:24" time="3.814" tests="1">
    <testcase classname="Express app tests - cookies with multiple sessions integration" name="Express app tests - cookies with multiple sessions integration" time="2.835">
    </testcase>
  </testsuite>
  <testsuite name="ExpressMiddlewareFactory" errors="0" failures="0" skipped="0" timestamp="2021-03-10T19:47:05" time="23.771" tests="5">
    <testcase classname="ExpressMiddlewareFactory should respond with 401 if empty header" name="ExpressMiddlewareFactory should respond with 401 if empty header" time="0.005">
    </testcase>
    <testcase classname="ExpressMiddlewareFactory should respond with 401 if invalid header" name="ExpressMiddlewareFactory should respond with 401 if invalid header" time="0.001">
    </testcase>
    <testcase classname="ExpressMiddlewareFactory no cookies should call next if valid JWT" name="ExpressMiddlewareFactory no cookies should call next if valid JWT" time="3.002">
    </testcase>
    <testcase classname="ExpressMiddlewareFactory no cookies should respond with 401 if the issuer of the access token is not the service did" name="ExpressMiddlewareFactory no cookies should respond with 401 if the issuer of the access token is not the service did" time="3.188">
    </testcase>
    <testcase classname="ExpressMiddlewareFactory no cookies should respond with 401 if exceed amount of requests" name="ExpressMiddlewareFactory no cookies should respond with 401 if exceed amount of requests" time="7.201">
    </testcase>
  </testsuite>
  <testsuite name="JWT Utils" errors="0" failures="0" skipped="0" timestamp="2021-03-10T19:47:24" time="10.863" tests="6">
    <testcase classname="JWT Utils generateAccessToken should create a jwt without metadata" name="JWT Utils generateAccessToken should create a jwt without metadata" time="0.103">
    </testcase>
    <testcase classname="JWT Utils generateAccessToken should sign with the expected alg" name="JWT Utils generateAccessToken should sign with the expected alg" time="2.473">
    </testcase>
    <testcase classname="JWT Utils generateAccessToken should create a jwt with metadata" name="JWT Utils generateAccessToken should create a jwt with metadata" time="0.078">
    </testcase>
    <testcase classname="JWT Utils verifyReceivedJwt should verify a valid jwt" name="JWT Utils verifyReceivedJwt should verify a valid jwt" time="2.37">
    </testcase>
    <testcase classname="JWT Utils verifyReceivedJwt should throw an error if nbf &gt; now" name="JWT Utils verifyReceivedJwt should throw an error if nbf &gt; now" time="2.338">
    </testcase>
    <testcase classname="JWT Utils verifyReceivedJwt should throw an error if exp &lt; now" name="JWT Utils verifyReceivedJwt should throw an error if exp &lt; now" time="2.537">
    </testcase>
  </testsuite>
</testsuites>